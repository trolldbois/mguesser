# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _mguesser
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


UDM_LM_MAXGRAM = _mguesser.UDM_LM_MAXGRAM
UDM_LM_HASHMASK = _mguesser.UDM_LM_HASHMASK
UDM_LM_TOPCNT = _mguesser.UDM_LM_TOPCNT
class UDM_LANGITEM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UDM_LANGITEM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UDM_LANGITEM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _mguesser.UDM_LANGITEM_count_set
    __swig_getmethods__["count"] = _mguesser.UDM_LANGITEM_count_get
    if _newclass:count = _swig_property(_mguesser.UDM_LANGITEM_count_get, _mguesser.UDM_LANGITEM_count_set)
    __swig_setmethods__["str"] = _mguesser.UDM_LANGITEM_str_set
    __swig_getmethods__["str"] = _mguesser.UDM_LANGITEM_str_get
    if _newclass:str = _swig_property(_mguesser.UDM_LANGITEM_str_get, _mguesser.UDM_LANGITEM_str_set)
    def __init__(self, *args): 
        this = _mguesser.new_UDM_LANGITEM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mguesser.delete_UDM_LANGITEM
    __del__ = lambda self : None;
UDM_LANGITEM_swigregister = _mguesser.UDM_LANGITEM_swigregister
UDM_LANGITEM_swigregister(UDM_LANGITEM)

class UDM_LANGMAP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UDM_LANGMAP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UDM_LANGMAP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["expectation"] = _mguesser.UDM_LANGMAP_expectation_set
    __swig_getmethods__["expectation"] = _mguesser.UDM_LANGMAP_expectation_get
    if _newclass:expectation = _swig_property(_mguesser.UDM_LANGMAP_expectation_get, _mguesser.UDM_LANGMAP_expectation_set)
    __swig_setmethods__["dispersion"] = _mguesser.UDM_LANGMAP_dispersion_set
    __swig_getmethods__["dispersion"] = _mguesser.UDM_LANGMAP_dispersion_get
    if _newclass:dispersion = _swig_property(_mguesser.UDM_LANGMAP_dispersion_get, _mguesser.UDM_LANGMAP_dispersion_set)
    __swig_setmethods__["lang"] = _mguesser.UDM_LANGMAP_lang_set
    __swig_getmethods__["lang"] = _mguesser.UDM_LANGMAP_lang_get
    if _newclass:lang = _swig_property(_mguesser.UDM_LANGMAP_lang_get, _mguesser.UDM_LANGMAP_lang_set)
    __swig_setmethods__["charset"] = _mguesser.UDM_LANGMAP_charset_set
    __swig_getmethods__["charset"] = _mguesser.UDM_LANGMAP_charset_get
    if _newclass:charset = _swig_property(_mguesser.UDM_LANGMAP_charset_get, _mguesser.UDM_LANGMAP_charset_set)
    __swig_setmethods__["memb"] = _mguesser.UDM_LANGMAP_memb_set
    __swig_getmethods__["memb"] = _mguesser.UDM_LANGMAP_memb_get
    if _newclass:memb = _swig_property(_mguesser.UDM_LANGMAP_memb_get, _mguesser.UDM_LANGMAP_memb_set)
    __swig_setmethods__["topcount"] = _mguesser.UDM_LANGMAP_topcount_set
    __swig_getmethods__["topcount"] = _mguesser.UDM_LANGMAP_topcount_get
    if _newclass:topcount = _swig_property(_mguesser.UDM_LANGMAP_topcount_get, _mguesser.UDM_LANGMAP_topcount_set)
    def __init__(self, *args): 
        this = _mguesser.new_UDM_LANGMAP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mguesser.delete_UDM_LANGMAP
    __del__ = lambda self : None;
UDM_LANGMAP_swigregister = _mguesser.UDM_LANGMAP_swigregister
UDM_LANGMAP_swigregister(UDM_LANGMAP)

class UDM_LANGMAPLIST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UDM_LANGMAPLIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UDM_LANGMAPLIST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nmaps"] = _mguesser.UDM_LANGMAPLIST_nmaps_set
    __swig_getmethods__["nmaps"] = _mguesser.UDM_LANGMAPLIST_nmaps_get
    if _newclass:nmaps = _swig_property(_mguesser.UDM_LANGMAPLIST_nmaps_get, _mguesser.UDM_LANGMAPLIST_nmaps_set)
    __swig_setmethods__["maps"] = _mguesser.UDM_LANGMAPLIST_maps_set
    __swig_getmethods__["maps"] = _mguesser.UDM_LANGMAPLIST_maps_get
    if _newclass:maps = _swig_property(_mguesser.UDM_LANGMAPLIST_maps_get, _mguesser.UDM_LANGMAPLIST_maps_set)
    def __init__(self, *args): 
        this = _mguesser.new_UDM_LANGMAPLIST(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mguesser.delete_UDM_LANGMAPLIST
    __del__ = lambda self : None;
UDM_LANGMAPLIST_swigregister = _mguesser.UDM_LANGMAPLIST_swigregister
UDM_LANGMAPLIST_swigregister(UDM_LANGMAPLIST)

class UDM_ENV(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UDM_ENV, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UDM_ENV, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LangMapList"] = _mguesser.UDM_ENV_LangMapList_set
    __swig_getmethods__["LangMapList"] = _mguesser.UDM_ENV_LangMapList_get
    if _newclass:LangMapList = _swig_property(_mguesser.UDM_ENV_LangMapList_get, _mguesser.UDM_ENV_LangMapList_set)
    __swig_setmethods__["errcode"] = _mguesser.UDM_ENV_errcode_set
    __swig_getmethods__["errcode"] = _mguesser.UDM_ENV_errcode_get
    if _newclass:errcode = _swig_property(_mguesser.UDM_ENV_errcode_get, _mguesser.UDM_ENV_errcode_set)
    __swig_setmethods__["errstr"] = _mguesser.UDM_ENV_errstr_set
    __swig_getmethods__["errstr"] = _mguesser.UDM_ENV_errstr_get
    if _newclass:errstr = _swig_property(_mguesser.UDM_ENV_errstr_get, _mguesser.UDM_ENV_errstr_set)
    def __init__(self, *args): 
        this = _mguesser.new_UDM_ENV(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mguesser.delete_UDM_ENV
    __del__ = lambda self : None;
UDM_ENV_swigregister = _mguesser.UDM_ENV_swigregister
UDM_ENV_swigregister(UDM_ENV)

UdmLoadLangMapFile = _mguesser.UdmLoadLangMapFile
UdmLoadLangMapList = _mguesser.UdmLoadLangMapList
UdmBuildLangMap = _mguesser.UdmBuildLangMap
UdmPrintLangMap = _mguesser.UdmPrintLangMap
UdmPrepareLangMap = _mguesser.UdmPrepareLangMap
UdmCheckLangMap = _mguesser.UdmCheckLangMap
UdmLoadLangMapListMultipleDirs = _mguesser.UdmLoadLangMapListMultipleDirs
UdmFreeLangMapList = _mguesser.UdmFreeLangMapList
usage = _mguesser.usage
guessold = _mguesser.guessold
guess = _mguesser.guess
buildEnv = _mguesser.buildEnv
buildLangMap = _mguesser.buildLangMap
class MGuesser():
  def __init__(self):
    self.env=buildEnv()
    #self.mchar=buildLangMap()
    pass
  # mou√©... et le free() ?
  def guess(self,buf):
    return guess(self.env,buf)
  def testArray(self):
    #new_mapStatArray(int)
    #delete_mapStatArray(array)
    #mapStatArray_getitem(array,int)
    #mapStatArray_setitem(array,int,val)


class UDM_MAPSTAT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UDM_MAPSTAT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UDM_MAPSTAT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["map"] = _mguesser.UDM_MAPSTAT_map_set
    __swig_getmethods__["map"] = _mguesser.UDM_MAPSTAT_map_get
    if _newclass:map = _swig_property(_mguesser.UDM_MAPSTAT_map_get, _mguesser.UDM_MAPSTAT_map_set)
    __swig_setmethods__["quality"] = _mguesser.UDM_MAPSTAT_quality_set
    __swig_getmethods__["quality"] = _mguesser.UDM_MAPSTAT_quality_get
    if _newclass:quality = _swig_property(_mguesser.UDM_MAPSTAT_quality_get, _mguesser.UDM_MAPSTAT_quality_set)
    def __init__(self, *args): 
        this = _mguesser.new_UDM_MAPSTAT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mguesser.delete_UDM_MAPSTAT
    __del__ = lambda self : None;
UDM_MAPSTAT_swigregister = _mguesser.UDM_MAPSTAT_swigregister
UDM_MAPSTAT_swigregister(UDM_MAPSTAT)

statcmp = _mguesser.statcmp
new_mapStatArray = _mguesser.new_mapStatArray
delete_mapStatArray = _mguesser.delete_mapStatArray
mapStatArray_getitem = _mguesser.mapStatArray_getitem
mapStatArray_setitem = _mguesser.mapStatArray_setitem


